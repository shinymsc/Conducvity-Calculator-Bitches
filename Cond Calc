rm(list = ls())
library(devtools)
library(shiny)
install_github('shiny', 'rstudio')
shape_select <-c("Cone","Sphere","Prism")
#shape_select[1] <-how to select from this list

#Take 1,2, or 3 from shape_select and then assign it a number value
#shape_select[1]...etc  
if (interactive()){
ui <- fluidPage(pageWithSidebar(
  headerPanel('BioPhysical Model for Intertidal Organisms'),
  sidebarPanel(
    fileInput("GimmeCSV",'Fileinput',accept=c('text/csv','text/comma-separated-values,text/plain','.csv',Header = TRUE,sep =",")
              ),
    tags$hr(),
   
    fluidRow(column(4, verbatimTextOutput("contents"))),
    selectInput('Shape', 'Shape of Animal', shape_select),
    
    conditionalPanel(condition = "input.Shape == 'Cone'",
                    numericInput("diacone","Diameter of Cone (mm)",0, min = 1, max = 750),
                    numericInput("hgtcone","Height of Cone (mm)",0, min = 1, max = 750)
                    ),
    conditionalPanel(condition = "input.Shape == 'Sphere'",
                     numericInput("diasphere","Diameter (mm)",0, min = 1, max = 750)),
    conditionalPanel(condition = "input.Shape == 'Prism'",
                     numericInput("lenprism","Length of Prism (mm)",0, min = 1, max = 750),
                     numericInput("hgtprism","Height of Prism (mm)",0, min = 1, max = 750),
                     numericInput("widprism","Width of Prism (mm)",0, min = 1, max = 750)
                                         ),
    
verbatimTextOutput("value"),
     
   
    #Assuming Size is going to the variable of choice here that will be modified
    # in the serve segment

    downloadButton('downloadData','Download'),

tags$hr(),

    tableOutput(outputId = 'table.preview')



),
     
  
  mainPanel(
    
    
    tableOutput(outputId = 'table.output')
  )
  
)
 
)

server <-function(input,output){# Combine the selected variables into a new data frame
  
  #output$value <- renderPrint({
  # str(input$GimmeCSV[2,2])

  output$table.preview <- renderTable({
    
    inFile <- input$GimmeCSV
    
    preview <- read.csv(inFile$datapath, header=TRUE, sep=",")
    return(head(preview)) # undo Table can be modified 
  
  })
    
  output$table.output <- renderTable({
    
    inFile <- input$GimmeCSV
    
    tbl <- read.csv(inFile$datapath, header=TRUE, sep=",")
    #return(head(tbl)) # undo Table can be modified 
    
    ################^ preview of csv table################
    #look up how to extract the columns  with no name present(something numerical)
    #After that is figured out calculating the rest of those values will be a snap
    #tbl <- read.csv(inFile$datapath, header=TRUE, sep=",")
    #below is temporary file path only used for testing purposes, the above read.csv is the true pooba
    
    #STANDARDS!!!
    solar <- tbl$solar
    temp  <- tbl$temp
    ws    <- tbl$ws
    
  
    #return(head(solar))
    Ktemp <-temp + 273
    ktemp <-temp + 273 
    #lol
    
    if ((input$Shape) == shape_select[1]){
      
      Len <- (input$diacone)
      Height <- (input$hgtcone)
      Width <- 0
    } else {if((input$Shape) == shape_select[2]){
      Len <- (input$diasphere)
      Height <- 0
      Width <- 0
      
    } 
      else 
        Len <- (input$lenprism)
        Height <- (input$hgtprism)
        Width <- (input$widprism)
          
    }

    r <-Len/2
    
    #return(r)
    
    
    if (Len >=0.037){  # Absorptivity from Luke Miller 
      Abs <- 0.615
    } else {if (Len <= 0.02225 ){Abs <-0.689
    } else Abs <- 0.68 } 
     #works!
  
    Emm <-0.97
    
    #TOTALLY ARBITURARY SURFACE AREA VALUES BASED ON WHAT I KNOW!
    ConeA <- (pi*r*r) + (sqrt((Height*Height)+(r*r))) # area of cone
    
    SphereA <- (4*pi*(r*r)) #area of sphere
    
    PrismA <- ((2*Len*Width) + (2*Height*Len) +( 2*Height*Width))
    
    #return(PrismA) 
    #WORKS
    
    #Deciding which surface area area to calculate
  
    if ((input$Shape) == shape_select[1]){
      
      SA <-ConeA
    } else {if((input$Shape) == shape_select[2]){SA <- SphereA} 
      else SA <-PrismA}
    
     
  #WOEKS!!!!!!!
    
    #return(SA)
    
  #Temporary placeholder values for PSA
    PSA <- SA
    
   SB <- 5.67E-08 # Stephan Boltzman constant
   
   eskyclear <- 0.72 + (0.005*temp)
  
   CC <- 0.5 #Cloud over 0 - 1
   
   esky <- eskyclear + CC*(1 - eskyclear - (8/ktemp)) #IR emissivity from sky
   
   Aradsky <- SA/2 #surface area projected to the sky
   
   Aradground <- SA/2 # surface area projected to the ground
   
   K3 <- esky^(1/4)
   K2 <- 4 * SB * Emm * (esky)^(3/4)
   K4 <- 4 * SB * Emm
   K5 <- 0.6/(0.5*Len)
   
   hc <- 0.6
   
   
   com1 <- (Abs * solar) + (K2 * (Aradsky/PSA) * K3 * Ktemp^4) + (K4 * (Aradground/PSA) * Ktemp^4) + (K5 * PSA * Ktemp) + (hc*SA*Ktemp) + 2.48*0
   com2 <- (4180 * 0) + ((Ktemp^3) * K2 * (Aradsky/PSA)) + (K4 * (Aradground/PSA) *(Ktemp^3)) + (hc*SA) + (K5*PSA)
   
   #works!
   
   Sol <- com1 / com2
   modeltemp <- Sol - 273
   max <- max(modeltemp)
   min <- min(modeltemp)
   
   
   
 
   
  mydata <- data.frame( Daily_Temp = temp, Solar_Radiation = solar, Body_Temperature = modeltemp, stringsAsFactors = FALSE)
   return(mydata)
  
  
})

  
  

  
  
} #app goes here lol

shinyApp(ui, server)
}
